ggplot(as.data.frame(df), aes(x="Zul_Laton_dval", y="Abl_Laton_dval"))
ggplot(as.data.frame(df), aes(x=Zul_Laton_dval, y=Abl_Laton_dval))
ggplot(as.data.frame(df), aes(x=Zul_Laton_dval, y=Abl_Laton_dval)) + scale_x_continuous()
ggplot(df, aes(x=Zul_Laton_dval, y=Abl_Laton_dval)) + scale_x_continuous()
gg_mulitvar(df, Zul_Laton_dval, Abl_Laton_dval)
gg_mulitvar(df, "Zul_Laton_dval"", "Abl_Laton_dval"")
gg_mulitvar(df, "Zul_Laton_dval", "Abl_Laton_dval"")
gg_mulitvar(df, "Zul_Laton_dval", "Abl_Laton_dval")
gg_mulitvar(df, "Zul_Laton_dval", "Abl_Laton_dval")
gg_mulitvar <- function(dfIn, var_x, var_y){
# prepare plot
p <-  ggplot(dfIn, aes(x=var_x, y=var_y)) +
theme_bw()
return(p)
}
gg_mulitvar(df, "Zul_Laton_dval", "Abl_Laton_dval")
gg_mulitvar(df, Zul_Laton_dval, Abl_Laton_dval)
gg_mulitvar <- function(dfIn, var_x, var_y){
# prepare plot
p <-  ggplot(dfIn, aes_string(x=var_x, y=var_y))+
geom_point(na.rm=TRUE) +
theme_bw()
return(p)
}
gg_mulitvar(df, "Zul_Laton_dval", "Abl_Laton_dval")
library(shiny)
library(readxl)
# shiny app user interface
source("./global.R")
mainP <- mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plotOut")),
tabPanel("Data", tableOutput("tabIn"))
)
)
ui <- fluidPage(
titlePanel("A-198 Auswertung"),
h5("KA Daten in xlsx Format einlesen um Daten interactive anzuschauen"),
br(),
hr(),
sidebarLayout(
sidebarPanel(
helpText("Bitte Datei einlesen, HINWEIS: Datum muss im Format DD.MM.YYYY sein"),
fileInput('xlsxIn', label = 'xlsx Datei auswählen', multiple=FALSE, accept=c(".xlsx")),
selectInput("plotType", "Grafiktyp", selected = NULL,
choices = c("Multivariate", "Cumsum", "Wirkungsgrad")),
helpText("Grafikparameter auswählen."),
# conditional input multivariate plot
conditionalPanel(condition = "input.plotType == 'Multivariate'",
uiOutput("paramX"),
uiOutput("paramY")) ,
#uiOutput("twMulti") ),
# conditiaonl input cumulative sum plot
conditionalPanel(condition = "input.plotType == 'Cumsum'",
uiOutput("cumParam")) ,
#uiOutput("twCumSum")),
# conditional input Wirkungsgrad
conditionalPanel(condition = "input.plotType == 'Wirkungsgrad'",
uiOutput("paramIn"),
uiOutput("paramOut"),
uiOutput("dateCol"),
uiOutput("year"),
numericInput("grenzwert", label="Param. Grenzwert", value=2.0)),
#uiOutput("tw")),
uiOutput("tw"),
textInput("xlab", "X-axen Beschriftung"), #,
textInput("ylab", "Y-axen Beschriftung") #,
# TODO - create download link for displayed graphic
#actionButton('download', 'Grafiken herunterladen'),
#textInput("save_as", "Namen der zu speichernden Grafik")
),
mainP, position="left")
)
# shiny app server
server <- function(input, output, session) {
options(shiny.maxRequestSize=50*1024^2) #increasing maximum upload size
tabIn <- reactive({
xlsxIn <- input$xlsxIn
if (is.null(xlsxIn)){
return(NULL)
}
read_xlsx(xlsxIn$datapath)
})
colsIn <- reactive({
df <- tabIn()
if (is.null(df)) return(NULL)
names(df)
})
# data frame after converting date values
dfDates <- reactive({
df <- dfTW()
dateCol <- input$dateCol
if (is.null(df & is.null(dateCol))) {
return(NULL)
}
else{
dates <- as.POSIXct(strptime(df[,dateCol], format="%d.%m.%Y", tz="GMT"))
df[,dateCol] <- dates
return(df)
}
})
# reactive year values
years <- reactive({
df <- dfDates()
dateCol <- input$dateCol
sort(unique(year(df[,dateCol])))
})
dfTW <- reactive({
if(is.null(input$tw)){
df <- tabIn()
return(df)
}
else {
df <- tabIn()
filt <- which(df[,input$tw] == 1)
df <- df[filt,]
return(df)
}
})
output$tabIn <- renderTable({head(tabIn())})
# observeEvent(input$plotType,
reactivei({
req(tabIn())
if(input$plotType == "Multivariate"){
output$paramInMulti <- renderUI({
selectInput("paramX", "Parameter X", choices = colsIn())})
output$paramOutMulti <- renderUI({
selectInput("paramY", "Parameter Y", choices = colsIn())})
output$twMulti <- renderUI({
selectInput("tw", "Trockenwetter (1/0) filter", choices = colsIn())})
output$plotOut <- renderPlot(gg_mulitvar(dfTW(), input$paramInMulti, input$paramOutMulti))
} else if(input$plotType == "Wirkungsgrad"){
output$paramIn <- renderUI({
selectInput("paramIn", "Eingangskonz. (input)", choices = colsIn())})
output$paramOut <- renderUI({
selectInput("paramOut", "Ausgangskonz. (output)", choices = colsIn())})
output$tdateCol<- renderUI({
selectInput("dateCol", "Datum Spalte", choices = colsIn())})
output$tw <- renderUI({
selectInput("tw", "Trockenwetter (1/0) filter", choices = colsIn())})
# get years from parsing date column, once date column is selected
output$year <- renderUI({
selectInput("year", "Jahr filter", choices = years())})
output$plotOut <- renderPlot({gg_barplot(dfDates(), input$dateCol, input$year,
input$paramIn, input$paramOut,
input$grenzwert, input$xlab)})
} else if(input$plotType == "Cumsum"){
output$cumParam <- renderUI({
selectInput("cumParam", "Parameter kumulative Summe", choices = colsIn())})
output$twCumSum <- renderUI({
selectInput("twCumSum", "Trockenwetter (1/0) filter", choices = colsIn())})
output$plotOut <- {renderPlot({ggplot_fun_tw(dfTW(), input$cumParam, input$xlab)})
}
}
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
#install.packages(c('zoo', 'readxl',"shiny", 'stringr', 'lattice', 'ggplot2', 'reshape2', 'lubridate', 'scales', 'tidyverse', 'WriteXLS', 'writexl'))
sapply(c("grDevices",'zoo', 'readxl',"shiny", "stringr", 'lattice', 'ggplot2',"reshape2", "lubridate", "scales", "WriteXLS", "writexl"), require, character.only = T)
#library("tidyverse")
# global functions
read_files <- function(inDir, pat="*.csv", readMe=read_csv2){
files = list.files(inDir, pattern=pat)
files = lapply(files, function(x) file.path(inDir, x))
df = do.call(rbind, lapply(files, readMe))
return(list(df, files))
}
ggplot_fun_tw <- function(df, colnamesx, xlab){
anno = paste("85% = ", quantile(as.data.frame(df[,colnamesx]), probs=c(0.85), na.rm=TRUE))
posx = quantile(as.data.frame(df[,colnamesx]), probs=c(0.01), na.rm=TRUE)
p = ggplot(df, aes_string(colnamesx)) +
stat_ecdf(geom = "step") +
annotate("text", x = posx, y = 0.88, label = anno)  +
theme_bw() +
ylab("Summenhäufigkeit") +
xlab(xlab) +
geom_hline(yintercept=.85, col=2, lwd=1)
return(p)
}
meanNA <- function(x){mean(x, na.rm = TRUE)}
filter_date_df <- function(dfIn, datecol, yr, sub_in, sub_out){
# filter by date and year
filtYear <- year(dfIn[,datecol]) == yr
filtVars <- c(datecol, sub_in, sub_out)
dfEval <- dfIn[filtYear, filtVars]
names(dfEval[,datecol]) <- "Date"
dfEval$Monat <- month(dfEval$Date)
# monthly average for every year ####
mean_Month <- aggregate(dfEval[,c(sub_in, sub_out)], list(dfEval$Monat), meanNA)
#change column name
names(mean_Month)[1] <- "Monat"
#convert into long format for ggplot
long_df <- melt(mean_Month, variable.name="Param", value.name="Conz", id.vars = "Monat")
long_df$Monat <- as.factor(long_df$Monat)
return(long_df)
}
##
# Inputs:
# df (dataframe): dataframe to be evaluated
# datecol (str): name of column that has date values
# year (num): year to be evaluated
# sub_in (num): concentration of substance at inlet
# sub_out (num): concentration of substanc at outflow
# grenzwert (num): given threshold value for the discharge concentration
# paramname (str): name of substance to be evaluated
gg_barplot <- function(dfIn, datecol, yearx, sub_in, sub_out, grenzwert, paramName){
# prepare data to plot
df <- filter_date_df(as.data.frame(dfIn), datecol, yearx, sub_in, sub_out)
yearChr <- as.character(yearx)
# prepare plot
p = ggplot(df, aes(x=Monat,y=Conz))+
geom_bar(aes(fill=Param), stat="identity", position="identity") +
coord_cartesian(ylim = c(0, max(df$Conz, na.rm=TRUE))) +
geom_hline(yintercept=grenzwert, col="2", size=1.5, show.legend = T) +
scale_x_discrete(df$Monat, name=paste("Monat", yearChr)) + #, date_breaks = "months", labels = date_format("%b")) +
scale_fill_manual(values=c("blue","chocolate4"),
name="Legende",
labels=c("Ablauf", "Zulauf"),
guide=guide_legend(reverse = TRUE)) +
scale_y_continuous(paste(paramName, "[mg/l]")) +
theme_bw()
return(p)
}
gg_mulitvar <- function(dfIn, var_x, var_y){
# prepare plot
p <-  ggplot(dfIn, aes_string(x=var_x, y=var_y))+
geom_point(na.rm=TRUE) +
theme_bw()
return(p)
}
## save ggplot
# inputs:
# plotIn (ggplot obj): ggplot object to be plotted
# pathOut (str): path where png file is to be saved (does not check file endings)
save_plot <- function(plotIn, pathOut, res=200, width=15.5, height=9.62, units="cm"){
png(pathOut, res=res, width=width, height=height, units=units)
print({plotIn})
dev.off()
}
# testing
df <- read_xlsx("../../KA_data/betriebstagebücher/collate.xlsx")
ggplot_fun_tw(df, "Abl_Laton_dval", "Laton")
ggplot_fun_tw(df[df$TW == 1,], "Abl_Laton_dval", "Laton")
df$Date <- as.POSIXct(strptime(df$Date, format="%d.%m.%Y", tz="GMT"))
parse_date_time(df$Date, "d m y")
parse_date_time(df$Date, "%d%m%y")
parse_date_time(df$Date, "%d%m%Y")
parse_date_time(df$Date, "dmY")
parse_date_time(df$Date, "%d.%m.%Y")
parse_date_time(as.charcter(df$Date), "%d.%m.%Y")
parse_date_time(as.character(df$Date), "%d.%m.%Y")
df$Date <- as.POSIXct(strptime(df$Date, format="%d.%m.%Y", tz="GMT"))
df$Date
df <- read_xlsx("../../KA_data/betriebstagebücher/collate.xlsx")
parse_date_time(as.character(df$Date), "%d.%m.%Y")
runApp()
runApp()
rm(mydata)
rm(directoryInput())
rm(directoryInput
)
rm(read_files)
rm(readDirectoryInput)
rm(updateDirectoryInput)
#install.packages(c('zoo', 'readxl',"shiny", 'stringr', 'lattice', 'ggplot2', 'reshape2', 'lubridate', 'scales', 'tidyverse', 'WriteXLS', 'writexl'))
sapply(c("grDevices",'zoo', 'readxl',"shiny", "stringr", 'lattice', 'ggplot2',"reshape2", "lubridate", "scales", "WriteXLS", "writexl"), require, character.only = T)
#library("tidyverse")
# global functions
read_files <- function(inDir, pat="*.csv", readMe=read_csv2){
files = list.files(inDir, pattern=pat)
files = lapply(files, function(x) file.path(inDir, x))
df = do.call(rbind, lapply(files, readMe))
return(list(df, files))
}
ggplot_fun_tw <- function(df, colnamesx, xlab){
anno = paste("85% = ", quantile(as.data.frame(df[,colnamesx]), probs=c(0.85), na.rm=TRUE))
posx = quantile(as.data.frame(df[,colnamesx]), probs=c(0.01), na.rm=TRUE)
p = ggplot(df, aes_string(colnamesx)) +
stat_ecdf(geom = "step") +
annotate("text", x = posx, y = 0.88, label = anno)  +
theme_bw() +
ylab("Summenhäufigkeit") +
xlab(xlab) +
geom_hline(yintercept=.85, col=2, lwd=1)
return(p)
}
meanNA <- function(x){mean(x, na.rm = TRUE)}
filter_date_df <- function(dfIn, datecol, yr, sub_in, sub_out){
# filter by date and year
filtYear <- year(dfIn[,datecol]) == yr
filtVars <- c(datecol, sub_in, sub_out)
dfEval <- dfIn[filtYear, filtVars]
names(dfEval[,datecol]) <- "Date"
dfEval$Monat <- month(dfEval$Date)
# monthly average for every year ####
mean_Month <- aggregate(dfEval[,c(sub_in, sub_out)], list(dfEval$Monat), meanNA)
#change column name
names(mean_Month)[1] <- "Monat"
#convert into long format for ggplot
long_df <- melt(mean_Month, variable.name="Param", value.name="Conz", id.vars = "Monat")
long_df$Monat <- as.factor(long_df$Monat)
return(long_df)
}
##
# Inputs:
# df (dataframe): dataframe to be evaluated
# datecol (str): name of column that has date values
# year (num): year to be evaluated
# sub_in (num): concentration of substance at inlet
# sub_out (num): concentration of substanc at outflow
# grenzwert (num): given threshold value for the discharge concentration
# paramname (str): name of substance to be evaluated
gg_barplot <- function(dfIn, datecol, yearx, sub_in, sub_out, grenzwert, paramName){
# prepare data to plot
df <- filter_date_df(as.data.frame(dfIn), datecol, yearx, sub_in, sub_out)
yearChr <- as.character(yearx)
# prepare plot
p = ggplot(df, aes(x=Monat,y=Conz))+
geom_bar(aes(fill=Param), stat="identity", position="identity") +
coord_cartesian(ylim = c(0, max(df$Conz, na.rm=TRUE))) +
geom_hline(yintercept=grenzwert, col="2", size=1.5, show.legend = T) +
scale_x_discrete(df$Monat, name=paste("Monat", yearChr)) + #, date_breaks = "months", labels = date_format("%b")) +
scale_fill_manual(values=c("blue","chocolate4"),
name="Legende",
labels=c("Ablauf", "Zulauf"),
guide=guide_legend(reverse = TRUE)) +
scale_y_continuous(paste(paramName, "[mg/l]")) +
theme_bw()
return(p)
}
gg_mulitvar <- function(dfIn, var_x, var_y){
# prepare plot
p <-  ggplot(dfIn, aes_string(x=var_x, y=var_y))+
geom_point(na.rm=TRUE) +
theme_bw()
return(p)
}
## save ggplot
# inputs:
# plotIn (ggplot obj): ggplot object to be plotted
# pathOut (str): path where png file is to be saved (does not check file endings)
save_plot <- function(plotIn, pathOut, res=200, width=15.5, height=9.62, units="cm"){
png(pathOut, res=res, width=width, height=height, units=units)
print({plotIn})
dev.off()
}
# testing
df <- read_xlsx("../../KA_data/betriebstagebücher/collate.xlsx")
ggplot_fun_tw(df, "Abl_Laton_dval", "Laton")
ggplot_fun_tw(df[df$TW == 1,], "Abl_Laton_dval", "Laton")
parse_date_time(as.character(df$Date), "%d.%m.%Y")
df$Date <- as.POSIXct(strptime(df$Date, format="%d.%m.%Y", tz="GMT"))
x <- filter_date_df(as.data.frame(df), "Date", 2017, "Zul_Laton_dval", "Abl_Laton_dval")
gg_barplot(df, "Date", 2017, "Zul_Laton_dval", "Abl_Laton_dval", 2.0, "Laton")
gg_mulitvar(df, "Zul_Laton_dval", "Abl_Laton_dval")
runApp()
runApp()
df
df$Date
year(df$Date)
unique(year(df$Date))
sort(unique(year(df$Date)))
runApp()
df
list(df=df, years=sort(unique(years(df$Date))))
sort(unique(year(df$Date)))
list(year=sort(unique(year(df$Date))))
y <- list(year=sort(unique(year(df$Date))))
y$year
y <- list(df=df, year=sort(unique(year(df$Date))))
y$df
runApp()
runApp()
runApp()
#install.packages(c('zoo', 'readxl',"shiny", 'stringr', 'lattice', 'ggplot2', 'reshape2', 'lubridate', 'scales', 'tidyverse', 'WriteXLS', 'writexl'))
sapply(c("grDevices",'zoo', 'readxl',"shiny", "stringr", 'lattice', 'ggplot2',"reshape2", "lubridate", "scales", "WriteXLS", "writexl"), require, character.only = T)
df <- read_xlsx("../../KA_data/betriebstagebücher/collate.xlsx")
df$Date
df[,"Date"]
as.data.frame(df[,"Date"])
runApp()
runApp()
View(df)
dates
runApp()
df$Date
runApp()
df$Date
dateCol
Datecol
dateCol
df$Date
dates
dateCol
df[,dateCol]
parse_date_time(df[,dateCol], "%d.%m.%Y")
parse_date_time(as.data.frame(df[,dateCol]), "%d.%m.%Y")
parse_date_time(as.character(df[,dateCol]), "%d.%m.%Y")
parse_date_time(as.character(df[,dateCol]))
parse_date_time(as.character(df[,dateCol]), "dmy")
head(df$Date)
df$Date
str(df$Date)
str(df)
parse_date_time(df[,dateCol], format="%d.%m.%y")
parse_date_time(df[,dateCol], "%d.%m.%y")
df[,dateCol]
dmy(df[,dateCol])
as.Date(df[,dateCol], formate="%d.%m.%Y")
as.Date(as.character(df[,dateCol]), formate="%d.%m.%Y")
as.Date(as.data.frame(df[,dateCol]), formate="%d.%m.%Y")
as.Date(as.character(as.data.frame(df[,dateCol])), formate="%d.%m.%Y")
Sys.getlocale("LC_TIME")
x <- df[,dateCol]
parse_date_time(x, "dmY")
parse_date_time(x, "d!m!Y!")
parse_date_time(x, "d!m!*Y!")
parse_date_time(x, c("%d.%m.%Y", "%d-%m-%Y", "%d%m%Y"))
x
format(x, "%d.%m.%Y")
format(trimws(x), "%d.%m.%Y")
format(trimws(x,which="both"), "%d.%m.%Y")
format(as.character(x), "%d.%m.%Y")
format(x, "%d.%m.%Y")
as.Date(format(x, "%d.%m.%Y"))
as.data.frame(x)
str(as.data.frame(x))
format(as.data.frame(x), "%d.%m.%Y")
as.Date(as.data.frame(x), "%d.%m.%Y")
parse_date_time(as.data.frame(x), "%d.%m.%Y")
x
dmy(x)
install.packages("anytime")
x
runApp()
dates
x <- df[,dateCol]
x
anytime(x)
anytime(as.data.frame(x))
anydate(as.data.frame(x))
mutate(df, date2=anytime(df[,dateCol]))
library(dplyr)
mutate(df, date2=anytime(df[,dateCol]))
mutate(df, date2=mdy(df[,dateCol]))
mutate(df, date2=dmy(df[,dateCol]))
shiny::runApp()
dates
x <- df[,dateCol]
x
summary(x)
library(dplyr)
x %>% mutate(len=length(Date))
x %>% mutate(len=length(x))
x %>% mutate(len=length(x$Date))
x
apply(x, 1, length)
len <- function(x){length(as.character(x))}
apply(x, 1, len)
length(x[1])
x[1]
x <- as.dataframe(x)
x[1]
x[1,1]
length(x[1,1])
x <- as.data.frame(x)
x
x[1]
x[1,1]
length(x[1,1])
dmy(x[1,1])
as.Date(x[1,1], format="%d.%m.%Y")
runApp()
runApp()
dates
df <- dfTW()
df
runApp()
dates
chrDates
trimws(chrDates, "both")
chrDates
runApp()
trimws(chrDates, "both")dates
dates
chrDates
trimws(chrDates,"both")
gsub("\n", "", chrDates)
as.data.frame(df[,dateCol])
as.character(as.data.frame(df[,dateCol]))
p <- as.data.frame(df[,dateCol])
str(p)
parse_date_time(p, "dmy")
library(anytime)
anytime(p)
apply(p, 1, as.character.Date)
apply(p, 1, as.character)
runApp()
dates
shiny::runApp()
runApp()
runApp()
