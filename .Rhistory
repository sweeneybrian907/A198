shiny::runApp()
runApp()
runApp()
4 %in% 100
4 %% 100
100/4
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(pla)
runApp()
runApp()
runApp()
View(mydata)
runApp()
runApp()
runApp()
runApp()
class(mydata[,1])
mydata[,1]
mydata[,1] <- dmy(mydata[,1])
mydata[,1]
mydata <<- as.tibble(list_2[[1]])
names(mydata)[1]
date_name <- names(mydata)[1]
mydata <- mydata %>%
mutate(date_name == dmy(date_name))
date_name <- names(mydata)[1]
mydata <- mydata %>%
mutate(!!date_name := dmy(date_name))
runApp()
mydata
date_name <- names(mydata)[1]
date_name
mydata <- mydata %>%
mutate(!!date_name := dmy(date_name))
mydata <- mydata %>%
mutate(Date == dmy(Date))
date_name <- names(mydata)[1]
date_name <- names(mydata)[1]
mydata <- mydata %>%
mutate_at(date_name == dmy(date_name))
date_name <- names(mydata)[1]
date_name
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.)))
mydata
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%
order(mydata[,1])
mydata[,1]
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.)))
mydata
date_name <- names(mydata)[1]
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.)))
mydata
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%
order(date)
runApp()
#  date_name <- names(mydata)[1]
mydata[,1] <- dmy(mydata[,1]# %>%
#   mutate_at(date_name, funs(date = dmy(.))) %>%
#   order(date)
#
#
#   select_if()
#   dmy(mydata[,1])
})
#  date_name <- names(mydata)[1]
mydata[,1] <- dmy(mydata[,1])# %>%
dmy(mydata[,1])
mydata[,1]
runApp()
View(mydata)
mydata
date_name <- names(mydata)[1]
date_name
mydata2 <- mydata
mydata <- mydata %>%
mutate_at(date_name, funs(date_name = dmy(.)))
mydata
mydata$date_name
class(mydata$date_name)
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.)))
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%
order(date)
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%
arrange(date)
mydata
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%
arrange(date) %>%
filter(-which(duplicated(date)))
filter(-which(duplicated(mydata$date)))
filter_(-which(duplicated(mydata$date)))
shiny::runApp()
duplicated(mydata[,1])
duplicates <- duplicated(mydata[,1])
duplicates
duplicates <- duplicated(mydata[,1]) %>% which()
duplicates
duplicates <- duplicated(mydata[0:100,1]) %>% which()
duplicates
mydata[-duplicates,]
duplicates
mydata[-c(duplicates),]
duplicates
duplicates <- duplicated(mydata[0:100,1]) %>% which()
duplicates
duplicates <- duplicated(mydata[,1]) %>% which()
mydata[-c(duplicates),]
duplicates > 0
duplicates <- duplicated(mydata[1:100,1]) %>% which()
duplicates > 0
duplicates <- duplicated(mydata[1:100,1]) %>% which()
duplicates
duplicates > 0
is.na(duplicates)
length(duplicates)
length(duplicates) > 0
duplicates <- duplicated(mydata[1:100,1]) %>% which()
duplicates <- duplicated(mydata[,1]) %>% which()
if(length(duplicates) > 0) {mydata <- mydata[-c(duplicates),]}
duplicates <- duplicated(mydata[,1]) %>% which()
duplicates
if(length(duplicates) > 0) {mydata <- mydata[-c(duplicates),]}
mydata
# Auswertung der KA Elzach Betriebstagebücher
# Brian Sweeney - 17.4.2018
#---------------------------------------------
# install packages ####
localLib <- "D:/temp/r_pkgs"
.libPaths(localLib)
load(paste0(localLib[1],"workspace.Rdata"))
install.packages("tidyverse")
install.packages(c("lubridate", "xlsx",'zoo', 'readxl', 'lattice', 'ggplot2',"grDevices"),        lib = localLib)
sapply(c("grDevices",'zoo', 'readxl', 'lattice', 'ggplot2',"reshape2", "lubridate", "scales", "readxl", "xlsx"), require, character.only = T, lib.loc=localLib)
library(tidyverse)
# set system time to "GMT"
Sys.setenv(TZ = "GMT")
# if needed change the working directory to the needed path
setwd("P:/02/ELZ/02ELZ17012/531_Wasser/04_Berechn/Betriebstagebuecher")
setwd("./02ELZ17012_R_auswertung")
pathToExcel = "P:/02/ELZ/02ELZ17012/531_Wasser/04_Berechn/Betriebstagebuecher/alt/02ELZ17012_Reinigungsleistung_2012-2017.xlsx"
exportpfad <- paste0(getwd(),"/r_graphics/")
pathToCsv <- "P:/02/ELZ/02ELZ17012/531_Wasser/06_Grundlagen/Elzach_Betriebstageb?cher/"
sheetName = 'gesamt'
getwd()
# import betriebstagebücher von excel -- (Betreibstagebücher were merged in Excel in the sheet "gesamt")
# change variables above to import another file
xcelSheet = read_excel(pathToExcel, sheet = sheetName)
csv_2017 <- read_csv2(paste0(pathToCsv, "2017.csv"))
csv_2017$Date <- dmy(csv_2017$Date)
csv_2018 <- read_csv2(paste0(pathToCsv, "2018.csv"))
csv_2018$Date <- dmy(csv_2018$Date)
tib = xcelSheet[,c(1, grep("*dval", colnames(xcelSheet)))]
tib2017 <- csv_2017[,c(1, grep("*dval", colnames(csv_2017)))]
tib2018 <- csv_2018[,c(1, grep("*dval", colnames(csv_2018)))]
# combining to one long df
start_copy <- which(tib2017$Date == "2017-11-28")
tib <- rbind(tib, tib2017[start_copy:(nrow(tib2017)),], tib2018)
range(tib$Date)
remove(tib2017,tib2018)
#save excel sheet with removed columns
check <- tib %>%
is.na() %>%
colSums()
nas_tib  <-   which(check==nrow(tib)) #this row needs to be rewritten for every df read into R change: "nas_tib"  and "tib"
install.packages("tidyverse")
install.packages(c("lubridate", "xlsx", "zoo", "readxl", "lattice", "ggplot2", "grDevices"), lib = localLib)
install.packages(c("lubridate", "xlsx", "zoo", "readxl", "lattice", "ggplot2", "grDevices"), lib = localLib)
#save excel sheet with removed columns
check <- tib %>%
is.na() %>%
colSums()
check
check <- mydata %>%
is.na() %>%
colSums()
check
which(check==nrow(mydata))
check==nrow(mydata)
which(check==nrow(mydata))
check
nrow(mydata)
check
which(check==nrow(mydata))
nas_tib  <-   which(check==nrow(mydata)) #this row needs to be rewritten for every df read into R change: "nas_tib"  and "tib"
nas_tib  <-   which(check==nrow(mydata)) #this row needs to be rewritten for every df read into R change: "nas_tib"  and "tib"
no_na_mydata<- mydata[,-nas_tib]
no_na_mydata
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date)
#removing columns
check <- mydata %>%
is.na() %>%
colSums()
nas_tib  <-   which(check==nrow(mydata)) #this row needs to be rewritten for every df read into R change: "nas_tib"  and "tib"
no_na_mydata<- mydata[,-nas_tib]
no_na_mydata
date_name <- names(mydata)[1]
duplicates <- duplicated(mydata[,1]) %>% which()
if(length(duplicates) > 0) {mydata <- mydata[-c(duplicates),]} #removing duplicates
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date)
#removing columns
check <- mydata %>%
is.na() %>%
colSums()
nas_tib  <-   which(check==nrow(mydata)) #this row needs to be rewritten for every df read into R change: "nas_tib"  and "tib"
no_na_mydata<- mydata[,-nas_tib]
no_na_mydata
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.)))
mydata
mydata %>%
mutate_at(date_name, funs(date = dmy(.)))
date_name
mydata$date
class(mydata$date)
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(date, everything(-date_name))
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(date, -one_of(date, date_name))
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of(date, date_name))
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of( date_name))
remove_cols <- c(date_name, "date")
remove_cols
remove_cols
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(date, -one_of(remove_cols))
mydata
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(date)
mydata
mydata <- mydata2
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(date)
mydata
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(date, -one_of(remove_cols))
date_name
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(date, -one_of(remove_cols))
mydata
mydata <- mydata2
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(date, -one_of(remove_cols))
mydata
mydata <- mydata2
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(date, -one_of(date_name))
mydata
mydata <- mydata2 %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of(date_name))
mydata
mydata <- mydata2 %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of(date_name)) %>%
select(date, everything())
mydata
readDirectoryInput(session, 'directory')
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of(date_name)) %>%
select(date, everything()) %>%
write.xlsx(., "./klaeranlagen_daten.xlsx", showNA=F)
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of(date_name)) %>%
select(date, everything())
getwd()
mydata <- mydata2 %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of(date_name)) %>%
select(date, everything()) %>%
write.xlsx(., "./klaeranlagen_daten.xlsx", showNA=F)
install.packages(c("lubridate", "xlsx",'zoo', 'readxl', 'lattice', 'ggplot2',"grDevices","shiny", "stringr", "tidyverse", "WriteXLS"), lib = localLib)
install.packages(c("lubridate", "xlsx", "zoo", "readxl", "lattice", "ggplot2", "grDevices", "shiny", "stringr", "tidyverse", "WriteXLS"), lib = localLib)
sapply(c("grDevices",'zoo', 'readxl',"shiny", "stringr", 'lattice', 'ggplot2',"reshape2", "lubridate", "scales", "readxl", "xlsx", "tidyverse", "WriteXLS"), require, character.only = T, lib.loc=localLib)
WriteXLS("mydata", "./klaeranlagen_daten.xlsx", showNA=F)
WriteXLS("mydata", "./klaeranlagen_daten.xlsx")
mydata <- mydata2 %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of(date_name)) %>%
select(date, everything()) %>%
as.data.frame()
mydata
mydata <- mydata2 %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of(date_name)) %>%
select(date, everything()) %>%
as.data.frame() %>%
write.xlsx(., "./data/klaeranlagen_NEU.xlsx", showNA = F)
WriteXLS("mydata", "./klaeranlagen_daten.xlsx")
Sys.which("perl")
testPerl(perl = "perl", verbose = TRUE)
install.packages("perl")
system.file(package = "WriteXLS")
testPerl(perl = "perl", verbose = TRUE)
Sys.which("perl")
WriteXLS("mydata", "./klaeranlagen_daten.xlsx", perl = "D:/Work/perl/bin")
WriteXLS("mydata", "./klaeranlagen_daten.xlsx", perl = "D:/Work/perl/bin/perl")
nas_tib  <-   which(check==nrow(mydata))
mydata<- mydata[,-nas_tib]
mydata2[,-nas_tib]
nas_tib  <-   which(check==nrow(mydata))
nas_tib
#removing columns
check <- mydata %>%
is.na() %>%
colSums()
#removing columns
check <- mydata2 %>%
is.na() %>%
colSums()
check
which(check==nrow(mydata))
nas_tib  <-   which(check==nrow(mydata))
length(nas_tib)
mydata
mydata <- mydata2
mydata
date_name <- names(mydata)[1]
remove_cols <- c(date_name, "date")
duplicates <- duplicated(mydata[,1]) %>% which()
if(length(duplicates) > 0) {mydata <- mydata[-c(duplicates),]} #removing duplicates
#removing columns
check <- mydata %>%
is.na() %>%
colSums()
nas_tib  <-   which(check==nrow(mydata))
length(nas_tib)
mydata<- mydata[,-nas_tib]
mydata
nas_tib
setwd(readDirectoryInput(session, 'directory'))
mydata <- mydata2 %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of(date_name)) %>%
select(date, everything())
WriteXLS("mydata", "./klaeranlagen_daten.xlsx", perl = "D:/Work/perl/bin/perl") #perl must be installed
WriteXLS("mydata", "./klaeranlagen_daten.xlsx", perl = "D:/Work/perl/bin/perl") #perl must be installed
runApp('D:/0my_desktop/shiny/app/Klaeranlage_auswertung')
shiny::runApp()
runApp()
runApp()
sapply(c("grDevices",'zoo', 'readxl',"shiny", "stringr", 'lattice', 'ggplot2',"reshape2", "lubridate", "scales", "readxl", "xlsx", "tidyverse", "WriteXLS"), require, character.only = T)
install.packages(c("lubridate", "xlsx",'zoo', 'readxl', 'lattice', 'ggplot2',"grDevices","shiny", "stringr", "tidyverse", "WriteXLS"))
dfrff
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mydata[,-1]
mydata[,c(-1)]
mydata
View(mydata)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
server <- function(input, output, session) {
options(shiny.maxRequestSize=50*1024^2) #increasing maximum upload size
observeEvent(
ignoreNULL = TRUE,
eventExpr = {
input$directory
},
handlerExpr = {
if (input$directory > 0) {
path = choose.dir(default = readDirectoryInput(session, 'directory'))
updateDirectoryInput(session, 'directory', value = path)
}
}
)
observeEvent(input$upload,{
withProgress(message = 'Generating data', value = 0.14, {
list_2 <- read_files(readDirectoryInput(session, 'directory'))
mydata <<- as.tibble(list_2[[1]])
setProgress(.5)
date_name <- names(mydata)[1]
remove_cols <- c(date_name, "date")
duplicates <- duplicated(mydata[,1]) %>% which()
#removing duplicates
if(length(duplicates) > 0) {mydata <- mydata[-c(duplicates),]}
#removing columns
check <- mydata %>%
is.na() %>%
colSums()
nas_tib  <-   which(check==nrow(mydata))
if(length(nas_tib) >0)   mydata<- mydata[,-nas_tib]
setwd(readDirectoryInput(session, 'directory'))
mydata <- mydata %>%
mutate_at(date_name, funs(date = dmy(.))) %>%  #format date
arrange(date) %>%
select(-one_of(date_name)) %>%
select(date, everything())
setProgress(.7)
WriteXLS("mydata", "./klaeranlagen_daten.xlsx", perl = "B:/Programme/Perl_strawberry/perl/bin/perl") #perl must be installed change path if necessary
#      output$input <- renderUI({
# selectInput("input", "Eingangskonz. (input)", choices = colnames(mydata))})
#
#      output$output <- renderUI({
# selectInput("output", "Ausgangskonz. (output)", choices = colnames(mydata))})
#
output$tw <- renderUI({
selectInput("cum_sum", "Kumulative Summe", choices = colnames(mydata))})
setProgress(1)
Sys.sleep(.35)
})
output$message<- renderText({paste(list_2[[2]])})
showNotification("Erfolgreich umgewandelt. Bitte überprüfen Sie die Tabelle. Sie ist abgespeichert im Arbeitsverzeichnis: klaeranlagen_daten.xlsx. Wenn alles stimmt können jetzt die entsprechenden Grafiken erstellt werden.", type="message", duration = NULL)
})
output$dry_cum_sum <- renderPlot( {ggplot(mydata, aes_string(input$cum_sum))+
stat_ecdf(geom = "step")+
theme_bw()+
ylab("Summenhäufigkeit")+
xlab(paste("Trockenwetter Abfluss",input$xlab))+
geom_hline(yintercept=.85, col=2, lwd=1.2)
})
# filename<- reactiveValues(input$save_as)
# observe(input$download, {
#   if(input$save_as > 0) {
#   dir.create("./plots/", showWarnings = FALSE )
#   ggsave(filename= filename(), path = "./plots/")}
# })
}
install.packages("shiny")
library(shiny)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
install.packages("writexl")
runApp()
